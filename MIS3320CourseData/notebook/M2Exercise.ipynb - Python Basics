{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "369c9c83",
   "metadata": {},
   "outputs": [],
   "source": [
    "#PART II: Use Jupyter to Run Codes\n",
    "#Open a New Jupyter Notebook\n",
    "\n",
    "\n",
    "#Open Anaconda  . In Anaconda, find Jupyter and click Launch. \n",
    "    #• Jupyter will be launched in a web browser because is web-based. However, it does not connect to the Internet in any way. Internet is not needed for Jupyter to work.\n",
    "\n",
    "#In Jupyter, navigate to your MIS3320 CourseData/notebook directory.\n",
    "\n",
    "#Click New=>Python 3 (ipykernel) so that you create a new Jupyter notebook for Python codes.\n",
    "\n",
    "#Click File=>Save as… . In the next window, please ensure the file is saved under the notebook/ directory. Save the file as M2Exercise.\n",
    "        #• As the result, Jupyter will save a file named M2Exercise.ipynb under the notebook directory.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "51dba37a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Check the Current Working Directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "74fa7b5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\riyta\\\\MIS3320CourseData\\\\notebook'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "12d2ed3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#The pwd is a Unix command that shows the current working directory\n",
    "\n",
    "#The field beginning with In[] is called a cell. This is the place you type Unix commands or Python codes for execution.\n",
    "\n",
    "#There are three ways to run it (and you can choose the cell and re-run it as many times as you want):\n",
    "                #• Hit Shift+Enter (run and add a new cell). \n",
    "                #• Click => Run.\n",
    "                #• Hit Ctrl+Enter (run without adding a new cell).\n",
    "            \n",
    "#Your current working directory should be ending with MIS3320CourseData/notebook\n",
    "\n",
    "#Note: \n",
    "#For windows users, \\\\\n",
    "#For Mac users,  //\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0a06b113",
   "metadata": {},
   "outputs": [],
   "source": [
    "#PART III: Use Unix Commands to Navigate Directories (Reading: Navigating Files and Directories)\n",
    "\n",
    "#List Directories in Unix\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7e95d065",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Volume in drive C is OS\n",
      " Volume Serial Number is B64B-072A\n",
      "\n",
      " Directory of C:\\Users\\riyta\\MIS3320CourseData\\notebook\n",
      "\n",
      "03/19/2022  03:24 AM    <DIR>          .\n",
      "03/19/2022  03:24 AM    <DIR>          ..\n",
      "02/14/2022  03:25 AM             6,148 .DS_Store\n",
      "03/19/2022  03:24 AM    <DIR>          .ipynb_checkpoints\n",
      "03/19/2022  03:22 AM            18,842 M2Exercise.ipynb\n",
      "03/07/2022  02:41 AM            85,284 M3exercise.ipynb\n",
      "03/07/2022  03:17 AM            26,905 M4Exercise.ipynb\n",
      "03/07/2022  04:18 AM           178,342 M5Exercise.ipynb\n",
      "02/14/2022  03:25 AM               113 README.md\n",
      "03/07/2022  02:47 AM               164 scientists_df.tsv\n",
      "02/21/2022  12:45 PM             1,548 Untitled1.ipynb\n",
      "               8 File(s)        317,346 bytes\n",
      "               3 Dir(s)  27,792,990,208 bytes free\n"
     ]
    }
   ],
   "source": [
    "ls "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0559b8a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#The result will list the directories and files under the current directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ae2d917d",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (Temp/ipykernel_12256/1140702519.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"C:\\Users\\riyta\\AppData\\Local\\Temp/ipykernel_12256/1140702519.py\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    man ls\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "man ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6c5ede95",
   "metadata": {},
   "outputs": [],
   "source": [
    "# this is a unix comment to display manual page for the ls command. \n",
    "\n",
    "#mine doesn't work for some reason lol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9e0113a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Volume in drive C is OS\n",
      " Volume Serial Number is B64B-072A\n",
      "\n",
      " Directory of C:\\Users\\riyta\\MIS3320CourseData\\notebook\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "File Not Found\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Directory of C:\\Users\\riyta\\MIS3320CourseData\\Data\n",
      "\n",
      "02/14/2022  03:29 AM    <DIR>          .\n",
      "02/14/2022  03:29 AM    <DIR>          ..\n",
      "02/14/2022  03:25 AM                 0 .gitkeep\n",
      "02/14/2022  03:25 AM         2,407,517 acs_ny.csv\n",
      "02/14/2022  03:25 AM            46,158 banklist.csv\n",
      "02/14/2022  03:25 AM            90,190 billboard.csv\n",
      "02/14/2022  03:25 AM             5,385 bladder.csv\n",
      "02/14/2022  03:25 AM                56 concat_1.csv\n",
      "02/14/2022  03:25 AM                56 concat_2.csv\n",
      "02/14/2022  03:25 AM                64 concat_3.csv\n",
      "02/14/2022  03:25 AM             5,674 country_timeseries.csv\n",
      "02/14/2022  03:25 AM               311 doctors.csv\n",
      "02/14/2022  03:25 AM               298 doctors_unicode.csv\n",
      "02/14/2022  03:25 AM        49,439,217 epi_sim.zip\n",
      "02/14/2022  03:25 AM            81,932 gapminder.tsv\n",
      "02/14/2022  03:25 AM           267,845 housing.csv\n",
      "02/14/2022  03:25 AM           270,670 housing_renamed.csv\n",
      "02/14/2022  03:25 AM               965 pew.csv\n",
      "02/14/2022  03:25 AM            11,318 raw_data_urls.txt\n",
      "02/14/2022  03:25 AM               433 scientists.csv\n",
      "02/14/2022  03:25 AM               122 survey_person.csv\n",
      "02/14/2022  03:25 AM                74 survey_site.csv\n",
      "02/14/2022  03:25 AM               391 survey_survey.csv\n",
      "02/14/2022  03:25 AM               168 survey_visited.csv\n",
      "02/14/2022  03:25 AM           136,637 tesla_stock_yahoo.csv\n",
      "02/14/2022  03:25 AM             2,898 weather.csv\n",
      "02/14/2022  03:25 AM            11,498 wine.csv\n",
      "              25 File(s)     52,779,877 bytes\n",
      "               2 Dir(s)  27,791,056,896 bytes free\n"
     ]
    }
   ],
   "source": [
    "ls -F ..\\Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bbf3faa6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Don't worry about File not found the answer is correct what is shown, even prof said so\n",
    "\n",
    "#Remember, windows uses the \\ slash versus for Mac\n",
    "\n",
    "\n",
    "#Note:\n",
    "\n",
    "#..\\ means the parent directory of the current directory you’re in.\n",
    "\n",
    "#ls: This command will list the directories and files under the current directory\n",
    "\n",
    "\n",
    "#A flag is anything prefixed with a dash (-) that follows the command name to specify a specific task you want the command to do.\n",
    "\n",
    "#ls -F gives a full listing, indicating what type files are by putting a slash after directories and a star after executable files (programs you can run).\n",
    "\n",
    "#So, ls-F../Data means will list directories and files under the full listing under the parent directory; means how the content of data under the parent directory\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8afe098f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#PART IV: Load and Show the Data Set (Reading: Pandas for Everyone: 1.2)\n",
    "\n",
    "#Beginning from this part, you are working on a Python code script. \n",
    "    #• Save your work by clicking the save icon  .\n",
    "    #• When you reopen the Jupyter notebook to continue the work, click Kernel => Restart & Run All. In this way you can go through the steps from the beginning.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "50ad12bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Load a Data Set\n",
    "\n",
    "import pandas as pd    #Import pandas library and name it pd\n",
    "\n",
    "#Note: The codes after # are comments (not executed) that explain what the codes will do like I am doing now while you reading this :)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fedd78dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('../data/gapminder.tsv', sep='\\t')   #Load tsv data file, separated by Tab. Save the data as df\n",
    "\n",
    "\n",
    "# • The read_csv() and type() are both functions that have () for accepting inputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a0d157ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df)    #Will show result of the object type of df\n",
    "\n",
    "\n",
    "#Thus, the type of df is:  DataFrame "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5ec76d47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>continent</th>\n",
       "      <th>year</th>\n",
       "      <th>lifeExp</th>\n",
       "      <th>pop</th>\n",
       "      <th>gdpPercap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1952</td>\n",
       "      <td>28.801</td>\n",
       "      <td>8425333</td>\n",
       "      <td>779.445314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1957</td>\n",
       "      <td>30.332</td>\n",
       "      <td>9240934</td>\n",
       "      <td>820.853030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1962</td>\n",
       "      <td>31.997</td>\n",
       "      <td>10267083</td>\n",
       "      <td>853.100710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1967</td>\n",
       "      <td>34.020</td>\n",
       "      <td>11537966</td>\n",
       "      <td>836.197138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1972</td>\n",
       "      <td>36.088</td>\n",
       "      <td>13079460</td>\n",
       "      <td>739.981106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1699</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Africa</td>\n",
       "      <td>1987</td>\n",
       "      <td>62.351</td>\n",
       "      <td>9216418</td>\n",
       "      <td>706.157306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1700</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Africa</td>\n",
       "      <td>1992</td>\n",
       "      <td>60.377</td>\n",
       "      <td>10704340</td>\n",
       "      <td>693.420786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1701</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Africa</td>\n",
       "      <td>1997</td>\n",
       "      <td>46.809</td>\n",
       "      <td>11404948</td>\n",
       "      <td>792.449960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1702</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Africa</td>\n",
       "      <td>2002</td>\n",
       "      <td>39.989</td>\n",
       "      <td>11926563</td>\n",
       "      <td>672.038623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1703</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Africa</td>\n",
       "      <td>2007</td>\n",
       "      <td>43.487</td>\n",
       "      <td>12311143</td>\n",
       "      <td>469.709298</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1704 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          country continent  year  lifeExp       pop   gdpPercap\n",
       "0     Afghanistan      Asia  1952   28.801   8425333  779.445314\n",
       "1     Afghanistan      Asia  1957   30.332   9240934  820.853030\n",
       "2     Afghanistan      Asia  1962   31.997  10267083  853.100710\n",
       "3     Afghanistan      Asia  1967   34.020  11537966  836.197138\n",
       "4     Afghanistan      Asia  1972   36.088  13079460  739.981106\n",
       "...           ...       ...   ...      ...       ...         ...\n",
       "1699     Zimbabwe    Africa  1987   62.351   9216418  706.157306\n",
       "1700     Zimbabwe    Africa  1992   60.377  10704340  693.420786\n",
       "1701     Zimbabwe    Africa  1997   46.809  11404948  792.449960\n",
       "1702     Zimbabwe    Africa  2002   39.989  11926563  672.038623\n",
       "1703     Zimbabwe    Africa  2007   43.487  12311143  469.709298\n",
       "\n",
       "[1704 rows x 6 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Show the Data Set\n",
    "\n",
    "df   #Show data df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e6eb612e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1704, 6)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape   #get the number of rows and columns\n",
    "\n",
    "\n",
    "# • The shape attribute is an attribute of the DataFrame object. Therefore, unlike functions, shape does not have () at the end.\n",
    "# • The result of shape is in the following format: (number of rows, number of columns).\n",
    "\n",
    "#how many rows and columns are in the df data set? See below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4a9f913f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['country', 'continent', 'year', 'lifeExp', 'pop', 'gdpPercap'], dtype='object')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns  #Get column names\n",
    "\n",
    "#• Like the shape attribute, columns is also an attribute of the DataFrame object.\n",
    "\n",
    "#what are the columns? See below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c8c4dd01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "country       object\n",
       "continent     object\n",
       "year           int64\n",
       "lifeExp      float64\n",
       "pop            int64\n",
       "gdpPercap    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes   #get the data type of each column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e4747d8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Save your work by clicking the save icon  . Click \"Logout\"   to quit Juypter\n",
    "\n",
    "#If want to open this up again ans see the results, click the \"Kernal\" at the top and select \" Restart & Run All\"\n",
    "#We do this because if we immediately start making a new line (ln) and entering the codes, it may result in an error \n",
    "        #since the codes previous to the line has not been run it. Best practice to do this always\n",
    "    \n",
    "#If you made an error midway like I have with man ls, the whole process stops to that point\n",
    "#In this case, I just manually run all the lines beneath that and it worked fine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e4cffef",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
